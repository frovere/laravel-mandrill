<?php

namespace Felrov\Drill\Tests;

use Illuminate\Mail\Mailable;
use Illuminate\Support\Facades\Mail;
use PHPUnit\Framework\Attributes\Test;
use Symfony\Component\HttpClient\MockHttpClient;
use Symfony\Component\HttpClient\Response\MockResponse;
use Symfony\Contracts\HttpClient\ResponseInterface;

class TransportTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    #[Test]
    public function it_uses_raw_endpoint_by_default(): void
    {
        $client = new MockHttpClient(function (string $method, string $url, array $options): ResponseInterface {
            $this->assertSame('POST', $method);
            $this->assertSame('https://mandrillapp.com/api/1.0/messages/send-raw.json', $url);

            $body = \json_decode($options['body'], true);
            $message = $body['raw_message'];
            $this->assertSame('TEST_API_KEY', $body['key']);
            $this->assertSame('recipient.email@example.com', $body['to'][0]);
            $this->assertStringContainsString('TEST MAIL', $message);

            return new MockResponse(\json_encode([['_id' => 'abc123abc123abc123abc123abc123']]), [
                'http_code' => 200,
            ]);
        });

        $this->app->instance('mandrill.http-client', $client);

        Mail::to('recipient.email@example.com')
            ->send($this->mailable());
    }

    private function mailable()
    {
        return new class() extends Mailable {
            public function build(): void
            {
                $this->html('TEST MAIL');
            }
        };
    }
}
